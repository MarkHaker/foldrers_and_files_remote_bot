# logic.py
import os
import re
import shutil

BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Windows
INVALID_CHARS = r'[<>:"/\\|?*]'
INVALID_NAMES = ["CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5",
                 "COM6", "COM7", "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5",
                 "LPT6", "LPT7", "LPT8", "LPT9"]


def is_valid_name(name):
    name = name.strip()
    if re.search(INVALID_CHARS, name):
        return False, f"‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: < > : \" / \\ | ? *)"
    if name.upper() in INVALID_NAMES:
        return False, f"‚ùå –ò–º—è '{name}' –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π Windows."
    if name.endswith(" ") or name.endswith("."):
        return False, f"‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ —Ç–æ—á–∫–æ–π."
    if not name:
        return False, f"‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    return True, ""


def create_folder(folder_name):
    valid, msg = is_valid_name(folder_name)
    if not valid:
        return msg

    folder_path = os.path.join(BASE_DIR, folder_name)
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
        return f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."
    else:
        return f"‚ùå –ü–∞–ø–∫–∞ '{folder_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."


def rename_folder(old_name, new_name):
    valid, msg = is_valid_name(new_name)
    if not valid:
        return msg

    old_path = os.path.join(BASE_DIR, old_name)
    new_path = os.path.join(BASE_DIR, new_name)

    if not os.path.exists(old_path):
        return f"‚ùå –ü–∞–ø–∫–∞ '{old_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    if os.path.exists(new_path):
        return f"‚ùå –ü–∞–ø–∫–∞ '{new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

    os.rename(old_path, new_path)
    return f"üîÑ –ü–∞–ø–∫–∞ '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'."


def delete_folder(folder_name):
    folder_path = os.path.join(BASE_DIR, folder_name)

    if not os.path.exists(folder_path):
        return f"‚ùå –ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    try:
        os.rmdir(folder_path)  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫
        return f"üóëÔ∏è –ü–∞–ø–∫–∞ '{folder_name}' —É–¥–∞–ª–µ–Ω–∞ (–±—ã–ª–∞ –ø—É—Å—Ç–æ–π)."
    except OSError:
        shutil.rmtree(folder_path)
        return f"üí• –ü–∞–ø–∫–∞ '{folder_name}' –∏ –≤—Å—ë –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω—ã."


def list_files_and_folders():
    items = os.listdir(BASE_DIR)
    folders = [item for item in items if os.path.isdir(os.path.join(BASE_DIR, item))]
    files = [item for item in items if os.path.isfile(os.path.join(BASE_DIR, item))]
    return folders, files


def create_or_edit_file(folder_name, file_name, content=None):
    folder_path = os.path.join(BASE_DIR, folder_name)
    file_path = os.path.join(folder_path, file_name)

    if not os.path.exists(folder_path):
        return f"‚ùå –ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    if content is None:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                return "üìÑ –¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞:\n\n" + f.read()
        else:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write("")
            return "üÜï –§–∞–π–ª —Å–æ–∑–¥–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å."
    else:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        return "üíæ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω."


def create_multiple_folders(count, base_name, unique_names=None):
    results = []
    if unique_names:
        for i, name in enumerate(unique_names):
            result = create_folder(name)
            results.append(result)
    else:
        for i in range(1, count + 1):
            name = f"{base_name}_{i}"
            result = create_folder(name)
            results.append(result)
    return "\n".join(results)


def create_multiple_files(folder_name, count, base_name, unique_names=None):
    results = []
    if unique_names:
        for name in unique_names:
            if not name.lower().endswith('.txt'):
                name += '.txt'
            result = create_or_edit_file(folder_name, name, " ")
            results.append(result)
    else:
        for i in range(1, count + 1):
            name = f"{base_name}_{i}.txt"
            result = create_or_edit_file(folder_name, name, " ")
            results.append(result)
    return "\n".join(results)