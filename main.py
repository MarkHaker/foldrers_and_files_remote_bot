# main.py
import telebot
from telebot import types
import logic

API_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨'

bot = telebot.TeleBot(API_TOKEN)

user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_create = types.KeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É")
    btn_multi = types.KeyboardButton("‚ûï –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ")
    btn_list = types.KeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    markup.add(btn_create, btn_multi, btn_list)
    return markup


def get_folder_actions_keyboard(folder_name):
    markup = types.InlineKeyboardMarkup()
    rename_btn = types.InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f'rename:{folder_name}')
    delete_btn = types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete:{folder_name}')
    edit_btn = types.InlineKeyboardButton("üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .txt", callback_data=f'edit:{folder_name}')
    markup.add(rename_btn, delete_btn, edit_btn)
    return markup


def get_multi_choice_keyboard():
    markup = types.InlineKeyboardMarkup()
    same_btn = types.InlineKeyboardButton("üî¢ –û–±—â–µ–µ –∏–º—è + –Ω–æ–º–µ—Ä", callback_data="same_name")
    diff_btn = types.InlineKeyboardButton("üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è", callback_data="diff_names")
    markup.add(same_btn, diff_btn)
    return markup


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


@bot.message_handler(func=lambda msg: msg.text == "üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É")
def handle_create_folder(message):
    user_states[message.chat.id] = {'action': 'create_folder'}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:")


@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ")
def handle_multi_create(message):
    user_states[message.chat.id] = {'action': 'multi_choose'}
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:", reply_markup=get_multi_choice_keyboard())


@bot.message_handler(func=lambda msg: msg.text == "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
def handle_list_files(message):
    folders, _ = logic.list_files_and_folders()
    if folders:
        bot.send_message(message.chat.id, "üìÇ –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫:")
        for folder in folders:
            bot.send_message(
                message.chat.id,
                f"üìÅ {folder}",
                reply_markup=get_folder_actions_keyboard(folder)
            )
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–∞–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    data = call.data
    chat_id = call.message.chat.id

    state = user_states.get(chat_id)

    if data == "same_name":
        if state and state['action'] == 'multi_choose':
            user_states[chat_id] = {'action': 'multi_same'}
            bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –∏ –±–∞–∑–æ–≤–æ–µ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 3 –ø–∞–ø–∫–∞")

    elif data == "diff_names":
        if state and state['action'] == 'multi_choose':
            user_states[chat_id] = {'action': 'multi_diff', 'step': 'count'}
            bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫:")

    elif data.startswith('rename:'):
        folder = data.split(':', 1)[1]
        user_states[chat_id] = {'action': 'rename_folder', 'old_name': folder}
        bot.send_message(chat_id, f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–∞–ø–∫–∏ '{folder}':")

    elif data.startswith('delete:'):
        folder = data.split(':', 1)[1]
        result = logic.delete_folder(folder)
        bot.send_message(chat_id, result)

    elif data.startswith('edit:'):
        folder = data.split(':', 1)[1]
        user_states[chat_id] = {'action': 'edit_multi_file', 'folder': folder, 'step': 'count'}
        bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:")


@bot.message_handler(func=lambda message: message.chat.id in user_states)
def handle_user_input(message):
    chat_id = message.chat.id
    state = user_states.get(chat_id)

    if state['action'] == 'create_folder':
        result = logic.create_folder(message.text.strip())
        bot.send_message(chat_id, result)
        del user_states[chat_id]

    elif state['action'] == 'rename_folder':
        new_name = message.text.strip()
        result = logic.rename_folder(state['old_name'], new_name)
        bot.send_message(chat_id, result)
        del user_states[chat_id]

    elif state['action'] == 'multi_same':
        parts = message.text.strip().split()
        if len(parts) < 2:
            bot.send_message(chat_id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 3 –ø–∞–ø–∫–∞")
            return
        try:
            count = int(parts[0])
            base_name = " ".join(parts[1:])
            result = logic.create_multiple_folders(count, base_name)
            bot.send_message(chat_id, result)
            del user_states[chat_id]
        except ValueError:
            bot.send_message(chat_id, "‚ùó –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    elif state['action'] == 'multi_diff':
        step = state['step']
        if step == 'count':
            try:
                count = int(message.text.strip())
                state['count'] = count
                state['step'] = 'names'
                state['names'] = []
                bot.send_message(chat_id, f"üîñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏–∑ {count} –ø–∞–ø–æ–∫:")
            except ValueError:
                bot.send_message(chat_id, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        elif step == 'names':
            state['names'].append(message.text.strip())
            if len(state['names']) < state['count']:
                bot.send_message(chat_id, f"üîñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {len(state['names']) + 1}-–π –ø–∞–ø–∫–∏:")
            else:
                result = logic.create_multiple_folders(None, None, state['names'])
                bot.send_message(chat_id, result)
                del user_states[chat_id]

    elif state['action'] == 'edit_multi_file':
        step = state['step']
        if step == 'count':
            try:
                count = int(message.text.strip())
                state['count'] = count
                state['step'] = 'type'
                bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", reply_markup=get_multi_choice_keyboard())
            except ValueError:
                bot.send_message(chat_id, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        elif step == 'type':
            folder = state['folder']
            count = state['count']
            if message.text.strip() == "same_name":
                state['step'] = 'base_name'
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–æ–≤:")
            elif message.text.strip() == "diff_names":
                state['step'] = 'file_names'
                state['file_names'] = []
                bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑ {count} —Ñ–∞–π–ª–æ–≤:")
        elif step == 'base_name':
            base_name = message.text.strip()
            folder = state['folder']
            result = logic.create_multiple_files(folder, state['count'], base_name)
            bot.send_message(chat_id, result)
            del user_states[chat_id]
        elif step == 'file_names':
            folder = state['folder']
            state['file_names'].append(message.text.strip())
            if len(state['file_names']) < state['count']:
                bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è {len(state['file_names']) + 1}-–≥–æ —Ñ–∞–π–ª–∞:")
            else:
                result = logic.create_multiple_files(folder, None, None, state['file_names'])
                bot.send_message(chat_id, result)
                del user_states[chat_id]


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
